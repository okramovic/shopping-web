{"dependencies":[{"name":"./request-constants","loc":{"line":1,"column":32}},{"name":"./object-assign-polyfill","loc":{"line":5,"column":8}},{"name":"./rpc-request","loc":{"line":183,"column":47}},{"name":"./download-request","loc":{"line":195,"column":52}},{"name":"./upload-request","loc":{"line":207,"column":50}}],"generated":{"js":"var REQUEST_CONSTANTS = require('./request-constants');\nvar DropboxBase;\n\n// Polyfill Object.assign() for older browsers\nrequire('./object-assign-polyfill');\n\n/**\n * @private\n * @class DropboxBase\n * @classdesc The main Dropbox SDK class. This contains the methods that are\n * shared between Dropbox and DropboxTeam classes. It is marked as private so\n * that it doesn't show up in the docs because it is never used directly.\n * @arg {Object} options\n * @arg {String} [options.accessToken] - An access token for making authenticated\n * requests.\n * @arg {String} [options.clientId] - The client id fo ryour app. Used to create\n * authentication URL.\n * @arg {Number} [options.selectUser] - User is the team access token would like\n * to act as.\n */\nDropboxBase = function (options) {\n  options = options || {};\n  this.accessToken = options.accessToken;\n  this.clientId = options.clientId;\n  this.selectUser = options.selectUser;\n};\n\n/**\n * Set the access token used to authenticate requests to the API.\n * @arg {String} accessToken - An access token\n * @returns {undefined}\n */\nDropboxBase.prototype.setAccessToken = function (accessToken) {\n  this.accessToken = accessToken;\n};\n\n/**\n * Get the access token\n * @returns {String} Access token\n */\nDropboxBase.prototype.getAccessToken = function () {\n  return this.accessToken;\n};\n\n/**\n * Set the client id, which is used to help gain an access token.\n * @arg {String} clientId - Your apps client id\n * @returns {undefined}\n */\nDropboxBase.prototype.setClientId = function (clientId) {\n  this.clientId = clientId;\n};\n\n/**\n * Get the client id\n * @returns {String} Client id\n */\nDropboxBase.prototype.getClientId = function () {\n  return this.clientId;\n};\n\n/**\n * Get a URL that can be used to authenticate users for the Dropbox API.\n * @arg {String} redirectUri - A URL to redirect the user to after\n * authenticating. This must be added to your app through the admin interface.\n * @arg {String} [state] - State that will be returned in the redirect URL to help\n * prevent cross site scripting attacks.\n * @returns {String} Url to send user to for Dropbox API authentication\n */\nDropboxBase.prototype.getAuthenticationUrl = function (redirectUri, state) {\n  var AUTH_BASE_URL = 'https://www.dropbox.com/oauth2/authorize';\n  var clientId = this.getClientId();\n  var authUrl;\n  if (!clientId) {\n    throw new Error('A client id is required. You can set the client id using .setClientId().');\n  }\n  if (!redirectUri) {\n    throw new Error('A redirect uri is required.');\n  }\n\n  authUrl = AUTH_BASE_URL + '?response_type=token&client_id=' + clientId;\n  if (redirectUri) {\n    authUrl = authUrl + '&redirect_uri=' + redirectUri;\n  }\n  if (state) {\n    authUrl = authUrl + '&state=' + state;\n  }\n  return authUrl;\n};\n\n/**\n * Called when the authentication succeed\n * @callback successCallback\n * @param {string} access_token The application's access token\n */\n\n/**\n * Called when the authentication failed.\n * @callback errorCallback\n */\n\n/**\n * An authentication process that works with cordova applications.\n * @param {successCallback} successCallback\n * @param {errorCallback} errorCallback \n */\nDropboxBase.prototype.authenticateWithCordova = function (successCallback, errorCallback)\n{\n  var redirect_url = 'https://www.dropbox.com/1/oauth2/redirect_receiver';\n  var url = this.getAuthenticationUrl(redirect_url);\n  var browser = window.open(url, '_blank');\n  var removed = false;\n\n  var onLoadError = function(event) {\n    // Try to avoid a browser crash on browser.close().\n    window.setTimeout(function() { browser.close() }, 10);\n    errorCallback();\n  }\n\n  var onLoadStop = function(event) {\n    var error_label = '&error=';\n    var error_index = event.url.indexOf(error_label);\n\n    if (error_index > -1) {\n      // Try to avoid a browser crash on browser.close().\n      window.setTimeout(function() { browser.close() }, 10);\n      errorCallback();\n    } else { \n      var access_token_label = '#access_token=';\n      var access_token_index = event.url.indexOf(access_token_label);\n      var token_type_index = event.url.indexOf('&token_type=');\n      if (access_token_index > -1) {\n        access_token_index += access_token_label.length;\n        // Try to avoid a browser crash on browser.close().\n        window.setTimeout(function() { browser.close() }, 10);\n\n        var access_token = event.url.substring(access_token_index, token_type_index);\n        successCallback(access_token);\n      }\n    }\n  };\n\n  var onExit = function(event) {\n    if(removed) {\n      return \n    }\n    browser.removeEventListener('loaderror', onLoadError);\n    browser.removeEventListener('loadstop', onLoadStop);\n    browser.removeEventListener('exit', onExit);\n    removed = true\n  };\n  \n  browser.addEventListener('loaderror', onLoadError);\n  browser.addEventListener('loadstop', onLoadStop);\n  browser.addEventListener('exit', onExit)\n}\n\nDropboxBase.prototype.request = function (path, args, auth, host, style) {\n  var request = null;\n  switch (style) {\n    case REQUEST_CONSTANTS.RPC:\n      request = this.getRpcRequest();\n      break;\n    case REQUEST_CONSTANTS.DOWNLOAD:\n      request = this.getDownloadRequest();\n      break;\n    case REQUEST_CONSTANTS.UPLOAD:\n      request = this.getUploadRequest();\n      break;\n    default:\n      throw new Error('Invalid request style: ' + style);\n  }\n\n  return request(path, args, auth, host, this.getAccessToken(), this.selectUser);\n};\n\nDropboxBase.prototype.setRpcRequest = function (newRpcRequest) {\n  DropboxBase.prototype.rpcRequest = newRpcRequest;\n};\n\nDropboxBase.prototype.getRpcRequest = function () {\n  if (DropboxBase.prototype.rpcRequest === undefined) {\n    DropboxBase.prototype.rpcRequest = require('./rpc-request');\n  }\n\n  return DropboxBase.prototype.rpcRequest;\n};\n\nDropboxBase.prototype.setDownloadRequest = function (newDownloadRequest) {\n  DropboxBase.prototype.downloadRequest = newDownloadRequest;\n};\n\nDropboxBase.prototype.getDownloadRequest = function () {\n  if (DropboxBase.prototype.downloadRequest === undefined) {\n    DropboxBase.prototype.downloadRequest = require('./download-request');\n  }\n\n  return DropboxBase.prototype.downloadRequest;\n};\n\nDropboxBase.prototype.setUploadRequest = function (newUploadRequest) {\n  DropboxBase.prototype.uploadRequest = newUploadRequest;\n};\n\nDropboxBase.prototype.getUploadRequest = function () {\n  if (DropboxBase.prototype.uploadRequest === undefined) {\n    DropboxBase.prototype.uploadRequest = require('./upload-request');\n  }\n\n  return DropboxBase.prototype.uploadRequest;\n};\n\nmodule.exports = DropboxBase;\n"},"hash":"2a5c9cd5df67b5993a9421b2bb2136e3"}