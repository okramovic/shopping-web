{"dependencies":[],"generated":{"js":"/**\n *        simple state management http://vuetips.com/simple-state-management-vue-stash\n * \n */\n\n// save last open locations to loc stor\n// for each product do display in DOM, use Component or template\n'use strict'\n\nwindow.otherUsers = []\n\nwindow.user_locations = new Dexie('user_locations');\n\n     window.user_locations.version(1).stores({  countries: 'name, cities'  });\n     user_locations.open().then(data=>{})\n          .catch(function(error) {\n                    console.error('Uh oh : ' + error);\n     });\n\n//const user1data = require('./testUserData1.json'), user2data = require('./testUserData2.json')\n\n\n\n\nconst users_followed = new Dexie('users_followed')\n\n     users_followed.version(1).stores({ userData: 'userName, countries'})\n\n     //users_followed.userData.put(user1data)\n     //users_followed.userData.put(user2data)\n     //console.log('user1data',user2data.userName)\n\nfunction getOtherUsersLocalData(){\n     return new Promise((res,rej)=>{\n               \n          users_followed.open(x=>{\n               console.log('x',x)\n               return //x.userData.toArray()\n          })\n          .then(()=>users_followed.userData.toArray())\n          .then(users =>{ \n               console.log('otherUsers',otherUsers)\n               let others = []\n               users.forEach(user=>others.push(user))\n               console.log('otherUsers',others)\n               res(others)\n\n          })\n          .catch(er=>alert('error opening following', er))\n     })\n}\n\n\n\n\n\n\nconst app = new Vue({\n     el: '#app',\n     data: {\n          locationInputShown: false,\n          locationSet: null,\n          newLocation: null,\n\n          \n          currentCountry: null,\n          currentCity:  null,\n          currentShop:  null,\n          countries: [],\n          cities: [],\n          shops: []\n     },\n     \n     methods:{\n          storeInitialDBData:function(){\n               return new Promise((resolve, reject)=>{\n\n                         user_locations.countries.put({\n                                             name: 'all countries' , \n                                             cities: [\n                                                       {\n                                                        name: 'all cities', \n                                                        shops:[{\n                                                                 name: 'all shops',\n                                                                 products: []\n                                                        }]\n                                                       }\n                                                     ]\n                              \n                         })\n                         .then(all=>{\n                                   console.log('stored initial data:', all,\"<<\")\n                                   //getOwnDBData()  \n                              user_locations.countries.toArray()\n                              .then(data=>resolve(data))\n                                   \n\n                         }).catch(er=>{console.error(er);\n                              reject(er)\n                         }) \n               })\n          },\n          getOwnDBData: function(){\n               return new Promise((reso, reje)=>{\n                    window.user_locations.countries.toArray()\n                    .then(all =>{  \n                                   //this.countries = all\n                                   reso(all)\n                    })\n               })\n          },\n          getLocalStoredUsersData: function(){\n               return new Promise((resolve, reject)=>{\n                    getOtherUsersLocalData().then(result=>{\n                         result = result.map(el=>el.countries)\n                         //console.log(result)\n                         resolve(result)\n                    })\n               })\n                    \n                         \n          },\n          openLocationInput: function(set,ev){\n               this.locationInputShown = true\n               console.log('event', set, ev)\n               this.locationSet = `${set}`\n\n               if (this.locationSet=='city' && this.currentCountry == 'all countries') {\n                    alert('choose country first')\n                    return this.locationInputShown = false\n               }\n          },\n          addNewLocation: function(){\n               console.log(`new ${this.locationSet} is ${this.newLocation}`)\n\n               this.addLocationToDB(this.locationSet, this.newLocation)\n          },\n          addLocationToDB: function(set, newName){\n\n               /*   under what country to add it\n                    should i update whole country document?\n               */     \n               \n               if (set =='country'){\n                              console.log('vue locs', user_locations)\n\n                              let index = this.countries.findIndex(country=>country.name == newName)\n\n                              if (index>-1) {\n                                   alert(`${newName}\\nis already in your database`)\n                                   return\n                              }\n                              const obj = {  name: newName, \n                                             cities: [{\n                                                  name: 'all cities', \n                                                  shops:[{\n                                                       name: 'all shops',\n                                                       products: []\n                                                  }]\n                                             }]\n                              }\n                              window.user_locations.countries.add(obj).then(status => \n                                   this.getOwnDBData().then(data => this.countries = data) // then select newly added thing\n                              )\n\n                         //})\n               } else if (set =='city') {\n                         let countryData = this.countries.find(cntry=> cntry.name==this.currentCountry)\n                         console.log( '   adding city',this.countries,\"\\n\",countryData)\n\n\n                         // check if this city is already there\n                         let index = countryData.cities.findIndex(city=>city == newName)\n\n                         if (index>-1){\n                              alert(`${newName}\\nis already in your database`)\n                              return\n                         }\n                         countryData.cities.push({\n                                             name: newName, \n                                             shops:[{\n                                                  name: 'all shops',\n                                                  products: []\n                                             }]\n                         })\n                         window.user_locations.countries.put(countryData).then(status =>{ \n\n                              this.getOwnDBData().then(data => this.countries = data)\n                              console.log('updated Vue data',this.countries) \n                         })\n               } else if (set =='shop') {\n                    let countryData = this.countries.find(cntry=> cntry.name===this.currentCountry)\n                    \n                    let cityData = countryData.cities.find(city=>city.name === this.currentCity)\n                    console.log( '   adding shop',cityData)\n                    // check its not there already\n                    if (cityData.shops.findIndex(shop=>shop.name===newName)>-1){\n                         alert(`${newName}\\nis already in your database`)\n                         return\n                    }\n\n                    cityData.shops.push(\n                                             {\n                                               name: newName,\n                                               products: []\n                                             }\n                                        )\n                    console.log('   new cntry data',this.currentCountry, countryData)\n                    window.user_locations.countries.put(countryData).then(status => {\n                                             console.log('   updated Vue data',this.countries) \n                                             this.getOwnDBData().then(data => this.countries = data) // then select newly added thing\n                    })\n\n               }\n               this.locationInputShown= false\n               this.newLocation = \"\"\n\n          },\n          updateLocationSelect:function(set, subset, event,text){\n\n               //console.log('event',event.timeStamp,set,subset)\n\n               // improve this nonsense\n               if (event && event.timeStamp>2000) setLastSelection(set, event.srcElement.selectedOptions[0].text)\n\n               const variable = event.srcElement.getAttribute('data-forlabel')\n               //console.log('---------------------\\n'+ 'set',set,\"subset\",subset, \"\\n variable\",variable)\n\n               //let string = event.srcElement.selectedOptions[0].text || text\n\n               if (event && event.srcElement.selectedOptions[0])\n               getSubsetItems(this[set], subset, event.srcElement.selectedOptions[0].text)\n               .then(result =>{\n                    //console.log(\"subset  >\",subset,\"\\n  >\",result.name, \"\\n  >\",result[subset])\n                    this[subset] = result[subset]\n               })\n          }\n     },\n     mounted: function(){\n          this.getOwnDBData().then( ownCountries =>{\n                    //console.log('resolved',countries)\n\n                    // = user opened app for first time or has deleted browser memory\n               if (ownCountries.length===0){\n                         this.storeInitialDBData()\n                         .then( initialData => \n                              //console.log('-->>  initialData', initialData)\n                              initializeCountriesState(this, initialData) )\n                         return\n                     }\n                    \n\n               this.getLocalStoredUsersData().then(users=>{\n                              \n                    //let allCountries = [...ownCountries]\n                    console.log('users', users)\n\n                    copyUserData(users).then(final=>{\n                              console.log('\\n\\n')\n                              console.log('final data', final)\n                              //console.log('this', this)\n                              initializeCountriesState(this, final)\n                    })\n\n                    function copyUserData(users){\n                         return new Promise((resolve, reject)=>{\n                              const sets = ['countries','cities','shops','products']\n                              let index = 0\n                              users.forEach(other_countries=>{\n                                             console.log('------------------', other_countries)\n                                             // finish one user completely, then another\n                                             copyEntries(index, ownCountries, other_countries)\n                                             .then(newCountries=>{\n                                                  resolve(newCountries) \n                                             })  \n                              })\n\n                    \n                              function copyEntries(outerIndex, ownEntries, otherEntries){\n                                   \n                                   function emptyspace(ind){\n                                             let spaces = \"\", len = ind*5\n                                             for (let i=0; i<len; i++){\n                                                  spaces = spaces.concat(\" \")\n                                             }\n                                             return spaces\n                                   }\n                                   let index = outerIndex +1\n                                   let set = sets[outerIndex], subset = sets[index]\n                                   //console.log(emptyspace(outerIndex),'index', index, subset)\n                                   //if (subset===undefined) return false;\n                                   //else \n                                   return new Promise((resolve,rej)=>{\n                                        otherEntries.forEach(other_entry=>{\n\n                                             console.log( emptyspace(outerIndex),`checking others '${other_entry.name}'`)\n\n                                             if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)===false) {\n                                                  // not among own ones\n                                                  console.log('|||',emptyspace(outerIndex),'NOT THERE -> ADDING ',other_entry.name )\n                                                  ownEntries.push(other_entry)\n                                             } else{\n                                                  //const subindex = index + 1\n                                                  ownEntries.forEach( own_entry=>{\n                                                       // take others subentries and add them to Own\n                                                       if (own_entry.name === other_entry.name){\n                                                            console.log(emptyspace(outerIndex),`duplicates ${own_entry.name} = ${other_entry.name}`)\n                                                            console.log(emptyspace(outerIndex),'subset',subset,'<<')\n                                                            if (subset!==undefined) // if subset is undefined, can it even reach this deep? i.e. - if the condition neccessary\n                                                            copyEntries(index, own_entry[subset], other_entry[subset] )\n\n                                                            else if (subset===undefined) console.log(emptyspace(outerIndex),'done -------')\n                                                       }\n                                                  })\n                                             }\n                                        })\n                                        resolve(ownEntries)\n                                   })\n                                   /*return new Promise((resolve,rej)=>{\n                                                  ownEntries.forEach(own_entry=>{\n                                                       console.log('own - checking ', own_entry.name)\n                    \n                                                       // if its not already among Own entries \n                                                       otherEntries.forEach( other_entry=>{\n                                                            //console.log('       ', other_entry.name)//, other_entry[subset])\n                                                            console.log('     ',own_entry.name, other_entry.name)\n                                                            if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)===false) {\n                                                                 // not among own ones\n                                                                 console.log('      not there -> adding ',other_entry.name )\n                                                                 ownEntries.push(other_entry)\n                                                                 \n                                                            } else {\n                                                                 // take others subentries and add them to Own\n                                                                 console.log(`     '${other_entry.name}'  is there, checking ${subset}`)\n                                                                 console.log(`     own ${subset}->`, own_entry[subset])\n                                                                 console.log(`     oth ${subset}->`, other_entry[subset])\n                                                                 // get all [subset] from own entry\n                                                                 // get all [subset] from other entries\n                                                            }\n                                                       })\n                                                  })\n                                                  console.log('!! final ownEntries', ownEntries)\n                                                  resolve(ownEntries)\n                                   })*/\n                              }\n                         })\n                    }\n               })\n\n          }).catch(er => console.error('error getting init data',er))\n          \n\n\n          function initializeCountriesState(self, countries){\n                    //console.log('this',self,\"\\n\", countries)\n                    //it doenst seem to reflect the content unless its refreshed by user\n\n                    self.countries = countries\n                    self.currentCountry = getLastSelection('countries')\n                    //self.updateLocationSelect('countries','cities',undefined, self.currentCountry.toString() )\n\n                    // city\n                    let lastCntry = countries.find(cn=>cn.name=== self.currentCountry)\n                    self.cities = lastCntry.cities\n                    //console.log('self.cities',self.cities)\n\n                    self.currentCity =  self.cities.find(city => city.name ==  getLastSelection('cities') )\n                    self.currentCity = self.currentCity.name\n\n                    // shop\n                    let lastCity = self.cities.find(city => city.name === self.currentCity )\n                    self.shops = lastCity.shops\n                    self.currentShop=  getLastSelection('shops') \n          }\n          function updateNextSelect(items){\n\n          }\n     },\n     created:function(){\n          //console.log('CREATED')\n     }\n     \n})\n\n\n\nfunction getSubsetItems(set, subset, name){\n     console.log('getSubsetItems',set, subset, name)\n     \n     return new Promise((resolve, rej)=>{\n          let result = set.find(obj=>obj.name === name)\n          //console.log('   !!!  res.name, result',result.name, result[subset])\n\n          resolve( {name:result.name, [subset]: result[subset] })\n          \n     })\n     \n}\nfunction updateSubsetSelect(){\n\n}\nfunction setLastSelection(set, value){\n     window.localStorage.setItem(set, value.toString() )\n}\nfunction getLastSelection(set){\n     \n     let val = window.localStorage.getItem(set)\n     //console.log('requested', set, val)\n     return val\n}\n\nfunction getPicDate(date){\n     console.log('typeof Date',typeof Date)\n \n     if (typeof date === 'number'){\n         date = new Date()\n         //var d = new Date();\n         //d.setTime(1332403882588);\n         console.log(date)\n     }\n \n     let year = date.getFullYear(),\n         month = date.getMonth()+1,\n         day = date.getDate(),\n         hours = date.getHours(),\n         minutes = date.getMinutes(),\n         secs = date.getSeconds()\n\n     return `${year}-${month}-${day} ${hours}-${minutes}-${secs}`\n     \n}"},"hash":"3fa93ee7a741f78e1cbe65a07db51c83"}