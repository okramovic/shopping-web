{"dependencies":[{"name":"dropbox","loc":{"line":20,"column":22}}],"generated":{"js":"/**\n *        simple state management http://vuetips.com/simple-state-management-vue-stash\n * \n */\n\n\n// for each product do display in DOM, use Component or template\n\n\n\n'use strict'\n\n//const Dexie = require('./vendor/Dexie.2.0.1.js'),\n//      Vue = require('./vendor/Vue.2.5.13.js')\n\n//import {addLocationToDB2} from './copy.js';\n\n//const token = 'qAZQ0ocdGioAAAAAAAACs8r7cWwxjlWLJx6b-qwlQOGEURMf-srx2X1wS_RnHari'\n\nvar Dropbox = require('dropbox');\n//let dbx //= new Dropbox({ accessToken: token });\n\n\n/*dbx.filesListFolder({path: ''})\n  .then(function(response) {\n     console.log('DBDBDBDBDBD')\n     console.log(response);\n     //getfileThumb(response.entries[0])\n     response.entries.forEach(entry=>{\n          getPicURL(entry)\n          .then(url=>{\n               let img = new Image()\n               img.onload = function(){\n                    this.width=144\n                    this.height=256\n               }\n                    \n               img.src = url\n               let body = document.querySelector('body')\n               body.appendChild(img)\n          })\n     })\n     //  convert url to file?  https://stackoverflow.com/questions/28042535/converting-image-object-to-file-object-javascript\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n*/\nconst getfileThumb = function(fileEntry){\n          \n          const id = fileEntry.id\n\n          //let obj = { \"path\": id , format: \"jpeg\", size: \"w128h128\" }\n          let obj = {\"path\": fileEntry.path_display }\n          obj = JSON.stringify( obj) \n          console.log(obj)\n\n          const xhr = new XMLHttpRequest()\n          xhr.onreadystatechange = function(){\n               if (this.readyState == 4 && this.status == 200) {\n\n                    console.log('SUKCES', this.response, this.responseText)\n                    \n                    let img = document.querySelector('#preview')\n                    img.src = this.responseText\n                    //const URL = window.URL || window.webkitURL\n                    //img.src = URL.createObjectURL(this.response) \n\n               } else\n\n               console.log('header', this.getAllResponseHeaders())\n          }\n          //xhr.open('POST','https://content.dropboxapi.com/2/files/get_thumbnail',true)\n          xhr.open('POST','https://api.dropboxapi.com/2/files/get_temporary_link', true)\n          xhr.setRequestHeader('Access-Control-Allow-Origin', '*')\n          xhr.setRequestHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n          //xhr.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n          xhr.setRequestHeader(\"Authorization\", \"Bearer qAZQ0ocdGioAAAAAAAACt4axxwChUOZ5U2XLXB1hvSzxXai4btwbq7O3LjzMst5c\")\n          //xhr.setRequestHeader(\"Dropbox-API-Arg\", obj)\n          //xhr.responseType = 'blob';\n          //xhr.send()\n          xhr.setRequestHeader('Content_Type','application/json')\n          \n          xhr.send(obj)\n}\n\n\n/*let getDropToken = function(){\n     const xhr = new XMLHttpRequest()\n     xhr.onreadystatechange = function(){\n                    if (this.readyState == 4 && this.status == 200) {\n\n                         console.log('SUKCES', this.response, this.responseText)\n                         \n                         \n\n                    } else console.log('header',this.status, this.getAllResponseHeaders())\n     }\n          //let url = 'https://www.dropbox.com/oauth2/authorize?' + 'response_type=token&' + 'client_id=hqdb69ima3zv29t&' + 'redirect_uri=http://localhost:1234/'\n     let url = 'https://api.dropboxapi.com/oauth2/token'\n     xhr.open('POST',url, true)\n     //xhr.send(   )\n\n}*/\n\nconst checkDrBxToken = function(){\n\n     if (window.location.hash){\n          // #access_token=qAZQ0ocdGioAAAAAAAACvzPeVzvTqmMsfEDCwQap8UvEMVAu8F0Zqatd1IypdhAt\n          // &token_type=bearer  // &uid=300342838  // &account_id=dbid%3AAAC5NUHLEil2GAOA3Si3wQmQ2pBC6qKCsEo\n\n          let str = window.location.hash.substr(1)\n          let arr = decodeURI(str).split('&')\n          //console.log(str,'arr',arr)\n          const accessToken = arr[0].replace('access_token=','')\n\n          window.dbx = new Dropbox({accessToken})\n\n          dbx.filesListFolder({path: ''})\n          .then(function(response) {\n               console.log('DBDBDBDBDBD')\n               console.log(response);\n\n          })\n          //window.DropToken\n     } else console.log('####   no DropBox token   ####')\n}\n\n\nconst initalCountryData = [{\n     name: 'all countries' , \n     cities: [\n               {\n                name: 'all cities', \n                shops:[{\n                         name: 'all shops',\n                         products: [{\"name\":\"časopis\"},{\"name\":\"denní tisk\"},{\"name\":\"česká igelitka\"}]\n                }]\n               }\n     ]\n}]\n\n\n\nwindow.otherUsers = []\n\n\nwindow.deviceUserData = new Dexie('deviceUserData')\n\nwindow.deviceUserData.version(1).stores({  userData: 'userName, countries'  })\nwindow.deviceUserData.open()\n     .then(data=>{\n               //console.log('open own DB, data:', data)\n     })\n     .catch(function(error) {\n               console.error('Uh oh : ' + error);\n     });\n\n\nconst users_followed = new Dexie('users_followed')\n      users_followed.version(1).stores({ userData: 'email, userName, countries'})\n      users_followed.open()\n      .catch(error => {\n               console.error('Uh oh : error opening Users_followed db' + error);\n      });\n     \n     //const user1data = require('./testUserData1.json'), user2data = require('./testUserData2.json')\n     //users_followed.userData.put(user1data)\n     //users_followed.userData.put(user2data)\n\n\nconst picturesDB = new Dexie('product_img')\n      picturesDB.version(1).stores({item: 'fileName, userName, data'})  // filename contains email\n      picturesDB.open()\n      .catch(er=>console.error('couldnt open DB',er))\n      \nconst serverURL = 'https://shopp.glitch.me/'\n\n\n\nconst app = new Vue({\n     el: '#app',\n     data: {\n          screen:'main',\n          showSignUp: false,\n          showLogin: false,\n          seeSignUp: false,\n          loginemail: null,\n          loginpass: null,\n\n          searchText: null,\n          searchResults: null,\n          followedUsers: [],\n\n          showSettings: false,\n          userName: undefined,\n          console: undefined,\n          locationInputShown: false,\n          locationSet: null,\n          newLocation: null,\n\n          currentCountry: null,\n          currentCity:  null,\n          currentShop:  null,\n          countries: [],\n          cities: [],\n          shops: [],\n          currentDisplayedProducts: [],\n\n          newProductForm: false,\n          newProductPreview: false,\n          newProductPreviewLastModified: null,\n          newProductType: null,\n          newProductName: null,\n          newProductDescription: null,\n          newProductDescriptionLong: null,\n          newProductPrice: null,\n\n          modifyingProduct: false\n     },\n     methods:{\n          switchScreen:function(screen){\n               this.screen = screen\n\n               if (screen =='main'){\n                    this.locationInputShown = false\n                    this.locationSet = null\n                    this.newLocation = null\n               }\n          },\n          showUserSettings:function(show){\n               this.showSettings = show;\n               if (show) this.screen = 'settings'\n               else this.screen = 'main'\n          },\n          login:function(){\n               let email = this.loginemail,\n                   password = this.loginpass\n\n               console.log('longin', email, password)\n\n               const tosend = {email, password}, self = this,\n\n               xhr = new XMLHttpRequest()\n               xhr.onreadystatechange = function() {\n\n                    if (this.readyState == 4 && this.status == 200) {      console.log('received',typeof this.responseText, this.responseText)\n\n                         let LSitems = ['deviceUserEmail', 'deviceUser', \n                                        'followedUsers', 'countries',\n                                        'cities', 'shops']\n                         LSitems.forEach(item=> window.localStorage.removeItem(item) )\n\n                         let loginResponse\n                              \n                         if (typeof this.responseText==='string') loginResponse = JSON.parse(this.responseText)\n\n                         window.localStorage.setItem('deviceUserEmail', email)\n                         updateDeviceUser(loginResponse.userName)\n                              \n                         if (loginResponse.followedUsers) // this doesnt store their country data\n                                   loginResponse.followedUsers.forEach(user=>addUserToDeviceLS(user))\n\n                         self.userName = loginResponse.userName\n\n                         self.informUser(`You hip'n'roll! Now logged iN`) // rock'n'hop\n                         self.screen = 'main'\n                         \n                         return self.startApp() //self.reloadView()\n\n                    } else if (this.readyState == 4 && this.status == 400){\n\n                         self.informUser(`something went wrong, try again later`)\n                    }\n               }\n               xhr.open(\"POST\", serverURL + \"API/login\", true)\n               xhr.send(JSON.stringify( tosend))\n\n          },\n          signUp: function($event){\n               $event.preventDefault()\n               let self = this\n                    let email = document.querySelector('input[name=\"reg-useremail\"').value\n                    let userName = document.querySelector('input[name=\"reg-username\"').value\n                    let password  = document.querySelector('input[name=\"reg-userpassword\"').value\n\n               if (userName==0) return alert(`sorry, '${userName}' can't be accepted as username`) // 0 is reserved for unregistered user in IDB\n\n               const tosend = {email, userName, password}\n               \n\n               if (!email || !userName || ! password) return console.error('email or name or pass missing')\n\n               let xhr = new XMLHttpRequest()\n               xhr.onreadystatechange = function() {\n                    \n                    if (this.readyState == 4 && this.status == 200) {  //this.responseText;\n                              //console.log(this.responseText,this.status)\n\n                              self.informUser(`You rock'n'b! Account created, check your email, spam etc`)\n                              window.localStorage.setItem('deviceUserEmail', email)\n\n                              updateDeviceUser(userName)\n                              \n                              self.userName = getDeviceUser()\n                              //.then(name=>self.userName = name)\n                              self.screen = 'main'\n\n                              return self.startApp()  // self.reloadView()\n\n                    } else if (this.readyState == 4 && this.status ==400)\n\n                              self.informUser(`Email address '${email}' is already used..`)\n                    else {}\n\n                  };\n\n               xhr.open(\"POST\", serverURL + \"API/signup\", true)\n               //xhr.setRequestHeader('Access-Control-Allow-Origin', true)  //Access-Control-Allow-Origin\n               xhr.send(JSON.stringify( tosend))\n          },\n          logout: function($ev){\n               console.log('>> logouted <<')\n               \n               let items = ['deviceUserEmail', 'deviceUser', \n               'followedUsers', 'countries',\n               'cities', 'shops']\n\n               items.forEach(item=>{\n                    console.log('item to remove', item)\n                    return window.localStorage.removeItem(item) })\n               \n               //this.userName = undefined\n               console.log('now will reload app')\n               return this.startApp() // this.reloadView()//\n          },\n          requestDropbox:function(){\n               console.log('dropbox requested')\n               \n               const xhr = new XMLHttpRequest()\n               xhr.onreadystatechange = function(){\n                    if (this.readyState == 4 && this.status == 200) {\n\n                         console.log('SUKCES', this.response, this.responseText)\n                         \n                         \n\n                    } else console.log('header',this.status, this.getAllResponseHeaders())\n               }\n               let url = 'https://www.dropbox.com/oauth2/authorize?' + \n                         'response_type=token&' +\n                         'client_id=hqdb69ima3zv29t&' +\n                         'redirect_uri=http://localhost:1234/'\n               //xhr.open('GET',url, true)\n               //xhr.send()\n               //const w = window.open(url)\n               window.location.href = url\n\n          },\n          requestUsers:function(){\n               let string = this.searchText\n               const self = this\n               console.log('search for:', string)\n\n               const xhr = new XMLHttpRequest()\n               xhr.onreadystatechange = function(){\n                    if (this.readyState == 4 && this.status == 200) { \n\n                         console.log('recevide', this.responseText, typeof this.responseText)\n                         const users = JSON.parse(this.responseText)\n                         console.log(users)\n                         self.searchResults = users\n                    }\n               }\n               xhr.open('GET', serverURL + 'API/search?string=' + string + \"&useremail=\" + window.localStorage.getItem('deviceUserEmail'), true)\n               xhr.send( string)\n\n          },\n          informUser: function(msg){\n               this.console = msg\n\n               setTimeout(()=>{\n                    this.console = undefined\n               },5000)\n          },\n          followUser:function(email,userName){\n               console.log('follow', email,userName)\n               const self = this\n\n               const xhr = new XMLHttpRequest()\n               xhr.onreadystatechange = function(){\n\n                    if (this.readyState == 4 && this.status == 200) { \n                         console.log('follow sekces')\n                         \n                         addUserToDeviceLS({userName, email})    // store new followdee in local storage\n\n                         fetchCountriesOfUser({userName, email})\n                         .then(setOtherUserIDBData)              // hard-replaces whole document with new data\n                         .then(self.reloadView)                    // here it copies data(countries etc) to device users\n\n                    } else if (this.readyState == 4 && this.status == 400) { \n                         console.error('TRY AGAIN LATER')\n                         this.informUser('TRY AGAIN LATER')\n                         // finish this part\n                    }\n               }\n               xhr.open('POST', serverURL + 'API/followuser', true)\n               xhr.send(JSON.stringify({  email, \n                                          userName,\n                                          addTo: window.localStorage.getItem('deviceUserEmail')\n                                       })\n               )\n\n          },\n          isFollowed:function(email){\n                    let users = JSON.parse(  window.localStorage.getItem('followedUsers')  )\n                    //console.log('search for',email, 'LS followed users', users)\n\n                    if (!users || users.some(user=>user.email== email)===false) return false\n                    else return true\n          },\n          unfollowUser:function(email){\n\n               // delete local storage country data of that user only if he isnt followed by any other deviceUser in IDB\n          },\n          openLocationInput: function(set,ev){\n               this.locationInputShown = true\n               //console.log('event', set, ev)\n               this.locationSet = `${set}`\n\n               if (this.locationSet=='city' && this.currentCountry == 'all countries') {\n                    alert('choose country first')\n                    return this.locationInputShown = false\n               }\n          },\n          addNewLocation: function(){\n               console.log(`new ${this.locationSet} is ${this.newLocation}`)\n               if (!this.newLocation) return alert('no name?');\n\n               const addLocation = addNewLocationToDB.bind(this)\n               return addLocation(this.locationSet, this.newLocation.toString() )\n               //return addNewLocationToDB(this.locationSet, this.newLocation)\n          },\n          updateLocationSelect:function(index, event,requestedShopName){\n               //console.log('slct', event.srcElement.selectedIndex)\n               //console.log('event','>',requestedShopName,'<')//'\\n', event.srcElement.getAttribute('data-saveas')  )\n\n               if (event && event.srcElement.selectedIndex<0) return;      // protection against DOM load events ?\n\n               const self = this\n               const selects = ['countries', 'cities', 'shops','products'],\n                     currents= ['currentCountry','currentCity','currentShop']\n               let name\n               if (event) {\n                    name = event.srcElement.selectedOptions[0].text\n                    setLastSelection(event.srcElement.getAttribute('data-saveas'), name)\n\n               } else name = requestedShopName\n               \n               //return console.log('name', name, 'event', event)\n               \n               getSubsetItems(this,index,name)\n                    .then(userOwnProducts =>{\n                         // save last locations to local storage rather here?\n                         console.log('----- user own products:', userOwnProducts.length, userOwnProducts)\n\n                         userOwnProducts = userOwnProducts.map(prod=>{prod.owner = this.userName || 0; return prod})\n                         // get products from each user in IDB: for current city, shop etc\n                         getOtherUsersIDBData(this.followedUsers)\n                         .then(users=>{\n                              console.log('users to add products from', users)\n\n                              let finals = []\n                              if (userOwnProducts.length>0) \n                                   finals = [...userOwnProducts]\n\n                              console.log('finals1', finals.length)\n\n\n                              if (users){\n                                   let otherProds = users.map(user=>{\n\n                                        const countryI = user.countries.findIndex(cntry => cntry.name === self.currentCountry)\n\n                                        if (countryI > -1){\n                                             \n                                             const cityI = user.countries[countryI].cities.findIndex(city=>city.name === self.currentCity )\n                                             //console.log('cityI', cityI)\n                                             const shop = user.countries[countryI].cities[cityI].shops.find(shop=>shop.name===self.currentShop)\n                                             //console.log('shop', shop)\n                                             if (shop && shop.products) return shop.products\n                                        }\n                                   }).filter(prods=>prods!==undefined)\n\n                                   if (otherProds.length>0) finals = finals.concat(...otherProds)\n                              }\n                              \n                              return new Promise((resolve, reject)=>{\n                                   // display products on screen\n                                   resolve (this.currentDisplayedProducts = finals ) //[...finals]\n\n                                   // check out vue cheatsheet (v-bind) to see how to attach classes\n                              })\n                               \n                         })\n                         .then(finals=>{\n                              console.log('finals2', finals.length)\n\n                              let prodsWImages = finals\n                                                  .filter(prod=>!!prod.imgName)\n                                                  .map(prod=>prod.imgName)\n\n                              /*let imgNames = document.querySelectorAll('div.product p.prodImgData')\n                                   let onlyNames = nodeListToArray(imgNames)*/\n                                   //console.log(imgNames, 'onlyNames', onlyNames)\n\n\n                              //\n                              return getImagesData(prodsWImages)\n                              \n                         })\n                         // give images their data\n                         .then(urls=>{\n                              let els = document.querySelectorAll('div.product img'),\n                              images = nodeListToArray(els)\n\n                              /** from docs\n                               * <!-- bind an attribute -->\n                                 <img v-bind:src=\"imageSrc\">\n                               */\n                              \n                              //console.log('??urls??', urls)\n                              images.map((image,i)=>image.src = urls[i])\n                         })\n                    })\n               function getSubsetItems(self, outerIndex, name){\n                    \n                    if (outerIndex>4) return console.error('outerIndex>4  !!!',outerIndex) // this doesnt seem to ever happen\n\n                    //console.log('getting items of', name)\n                    //console.log('continue -- outerIndex, name',outerIndex, name)\n                    return new Promise((resolve, rej)=>{\n                         // 0 1 2\n                         const currentX = currents[outerIndex]  // 'currentCountry' 'currentCity' 'currentShop'\n                         const index = outerIndex,\n                               superSet = selects[index-1], // 'countries' 'cities' 'shops'\n                               set      = selects[index],   // 'countries' 'cities' 'shops'\n                               subSet   = selects[index+1]  // 'countries' 'cities' 'shops'\n                               \n                         //console.log('self[currentX]', currentX, self[currentX])\n                         //console.log('set', set)\n\n                         //const name = event.srcElement.selectedOptions[0].text\n                         if (set == 'products'){\n                              //console.log('products', subSet, a.name, a[subSet], a.products)\n                              //console.log('PRODUCTS!!!  ', a.products)\n                              //resolve( getSubsetItems(self, outerIndex + 1, 'products') )\n                              return alert('oops')\n                         }\n\n                         let a = self[set].find(el=> el.name===name )\n                         \n                         \n\n                         self[currentX] = name\n                         console.log('current',currentX, name)\n                         //console.log('    save ?', set, name)\n                         setLastSelection(set, name)\n\n                         self[subSet] = a[subSet]\n                         //console.log('subSet', subSet)\n                         \n                         //console.log('---',currents[outerIndex+1])\n                         if (currents[outerIndex+1]=== undefined) {\n                              //console.log('products?', a.name, a[subSet])\n                              resolve(a[subSet]) \n                              //return\n                         }\n                         else {\n                              let string = currents[outerIndex+1].toString()\n                              self[string]= a[subSet][0].name    // 'currentCountry' 'currentCity' 'currentShop'\n                              \n                              //console.log('[subSet]', self[subSet][0])  // name of default item to set\n                              \n                              resolve(\n                                   getSubsetItems(self, outerIndex + 1, a[subSet][0].name)          \n                              )\n                         }\n                    })\n               }\n          },\n          openNewProductForm:function(open){\n               this.newProductForm = open\n          },\n          newProductSubmit: function($event){\n               $event.preventDefault()\n               \n               if (!this.newProductPreview) return this.informUser(`picture of product is required`)\n               //const form = document.querySelector('form[name=\"newProductForm\"')\n               const rating = document.querySelector('input[name=\"newRating\"]:checked').value\n\n               const fileName =`${window.localStorage.getItem('deviceUserEmail')\n                               }_D${getFormattedDate(this.newProductPreviewLastModified)}`.toString()\n\n               console.log('submit', fileName)\n               console.log(this.newProductType, this.newProductName, this.newProductDescription, this.newProductPrice, rating)\n               const fieldnames=['descr','descrLong','price'],\n                     otherFields = [this.newProductDescription, this.newProductDescriptionLong, this.newProductPrice]\n\n               const productToAdd = {\n                    imgName: fileName,\n                    type: this.newProductType,\n                    name: this.newProductName,\n                    rating\n               }\n               let voluntaryFields = otherFields.map(field=>{ \n                                             if (!!field && field.toString().trim()!=='') return field\n                                             else return null \n               })\n               \n               voluntaryFields.forEach((field,i)=>{\n                                   if (field) productToAdd[fieldnames[i]] = field.toString().trim()\n               })\n               console.log('product to add\\n', productToAdd)\n\n               // save image\n               saveImageToIDB(fileName)\n               .then(x=>{\n                    console.log('result 2', x)\n                    if (x) return x\n               })\n               .then(y=>{\n                    addProduct('product', productToAdd)\n                    this.newProductForm = false\n                    this.newProductPreview = false\n\n               }).catch(er=>alert('huge arror storing new product'))\n               \n               const addProduct = addNewLocationToDB.bind(this)\n\n               \n          },\n          imageAdded:function(ev){\n\n                    const reader = new FileReader(),\n                         self = this,\n                         file = ev.target.files[0]\n                    \n                    this.newProductPreviewLastModified = file.lastModified  // when storing pic to IDB, its part of filename\n                    console.log(file)\n\n                    reader.onload = function(fileObj){\n                         let img = new Image()\n\n                         //let data = fileObj.target.result\n                         \n                         img.onload = function(y){\n\n                              if (this.width>this.height) return alert(`take image with vertical orientation please`)\n\n                              let fract = 10\n                              let wid = 300     //parseInt(  this.width/fract),\n                                  //,hei = 300  //parseInt(  this.height/fract)\n                              \n\n                              const canvas = document.querySelector('canvas'),\n                                   ctx = canvas.getContext('2d'),\n                                   start = Math.floor( (this.height-this.width)/2 )\n                              canvas.width = wid\n                              canvas.height = wid\n\n\n                                             //  sX  sY     sW          sH                       \n                              ctx.drawImage(this,0,  start, this.width, this.width,  0,0, wid, wid)\n\n                              console.log(' canvas len', canvas.toDataURL().length/1024)\n                              console.log('preview len',img.src.toString().length/1024)\n\n                              self.newProductPreview = true\n\n                              window.canvasData = canvas.toDataURL() // canvas data for new image to save to IDB\n\n                              //let w = window.open()\n                              //w.document.write(`<img src=\"${canvas.toDataURL()}\" >`)\n                         }\n                         img.src = fileObj.target.result\n                         \n                    }\n                    \n                    reader.readAsDataURL(ev.target.files[0])\n                    //this.newProductForm = false\n          },\n          openProductForm:function(prod){\n               console.log('modify',prod)\n               if (!prod.owner) return alert(`You can only modify your own products`)\n\n               // let currCountry = this.currentCountry, etc...\n               //   get curr Country, City & Shop so if user would change them w form open,\n               //   take it as indication he wants to place product \n               //   to new current country city shop\n\n               this.modifyingProduct = true // to show correct submit button\n\n               if (prod.type) this.newProductType = prod.type\n               if (prod.name) this.newProductName = prod.name\n               if (prod.descr) this.newProductDescription = prod.descr\n               if (prod.descrLong) this.newProductDescriptionLong =prod.descrLong\n               if (prod.price) this.newProductPrice = parseFloat( prod.price )\n               \n               if (prod.rating) document.querySelectorAll(`input[type=\"radio\"][value=\"${prod.rating}\"]`)[0].setAttribute('checked', true)\n               \n\n               if (prod.imgName) \n               \n               getImagesData([prod.imgName])\n               .then(data=>{\n                    \n                    const self = this,\n                          img = new Image(),\n                          canv = document.querySelector('canvas'),\n                          ctx = canv.getContext('2d')\n\n                    img.onload = function(){\n                         ctx.drawImage(this,0,0,300,300)\n\n                         self.newProductPreview = true\n                    }\n                    img.src = data\n\n\n               })\n               this.newProductForm =true\n\n          },\n          applyProductChanges:function(ev){\n               ev.preventDefault()\n               console.log('prod change')\n          },\n          deleteProduct:function(ev){\n               ev.preventDefault()\n               console.log('delete')\n          },\n          reloadView:function(){\n                    console.log('RELOADING VIEW')\n\n                    let ownCountries,\n                        somethingChanged = false\n\n                    getOwnDBData(this.userName)\n                    .then( ownData =>{\n\n                         if (!this.userName || !this.followedUsers) return initializeLocationSelects(this, ownData)\n\n                         ownCountries = ownData\n\n                         return getOtherUsersIDBData(this.followedUsers)\n                    })\n                    .then(othersData=>{\n\n                         let own = [...ownCountries],\n                             Users = othersData.map(user=>user.countries)\n\n                         return copyUserData(Users, own)\n\n                         function copyUserData(users, owndata){\n                              //console.log('EQUAL', ownCountries == owndata)\n                              \n                              return new Promise((resolve, reject)=>{\n                                   const sets = ['countries','cities','shops','products']\n                                   let index = 0\n                                   users.forEach(other_countries => {\n\n                                             // remove products from each country\n                                             const others_cleaned = other_countries.map( country => removeProducts(country,0))     \n\n                                             copyEntries(index, owndata, others_cleaned)\n\n                                             .then(newCountries=> resolve(newCountries) )  \n                                   })\n\n                                   function removeProducts(entry,index){\n                                        //if (index>3) return;\n\n                                        if (entry.hasOwnProperty('products')){\n                                             //console.log('in SHOP', entry.name)\n                                             return {name: entry.name, products: []} //entry.products = []\n\n                                        } else if (entry.name){\n                                             //console.log('|||| not shop', index, entry.name, sets[index])\n                                             let name = entry.name\n                                             let prop = sets[index+1]  // cities shops\n                                             let y \n                                             entry[prop] = entry[prop].map(entry => {\n                                                            //console.log('-- going into',entry.name, sets[index+1])\n                                                            return removeProducts(entry, index+1)\n                                                       })\n                                             //console.log('filtered ',prop,'of',entry.name, entry[prop])\n                                             return entry\n                                        } \n                                   }\n                                   function copyEntries(outerIndex, ownEntries, otherEntries){\n                                        \n                                        function emptyspace(ind){\n                                                  let spaces = \"\", len = ind*5\n                                                  for (let i=0; i<len; i++){\n                                                       spaces = spaces.concat(\" \")\n                                                  }\n                                                  return spaces\n                                        }\n                                        let index = outerIndex +1\n                                        let set = sets[outerIndex], subset = sets[index]\n                                        //console.log(emptyspace(outerIndex),'index', index, set, subset)\n                                        // if its shops now\n\n                                        return new Promise((resolve,rej)=>{\n                                             otherEntries.forEach(other_entry=>{\n                                                  \n                                                  //console.log( emptyspace(outerIndex),`checking others '${other_entry.name}'`)\n\n                                                  if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)=== false ) {\n                                                       // not on device -> add it there\n                                                       //console.log(emptyspace(outerIndex),set, 'NOT THERE -> ADDING ',other_entry.name )\n                                                       //console.log(emptyspace(outerIndex),'- doing -', other_entry.name) \n                                                       //let locations = removeProducts( other_entry, index)\n                                                       //console.log('without products',set, locations, subset)\n                                                       //other_entry[subset] = location\n                                                       ownEntries.push(other_entry)\n                                                       somethingChanged = true\n                                                       //console.log(other_entry.name,'updated?',other_entry)\n                                                       //console.log( other_entry.name, 'updated?',locations )\n\n                                                  // if this entry is already there\n                                                  } else{\n                                                       ownEntries.forEach( own_entry=>{\n                                                            //console.log(emptyspace(outerIndex),'checking >>>',subset, 'of',own_entry.name, own_entry)\n                                                            //console.log(emptyspace(outerIndex),set, 'is there checking >>>',own_entry.name, own_entry)\n                                                            // take others subentries and add them to Own\n                                                            if (own_entry.name === other_entry.name){\n                                                                 //console.log(emptyspace(outerIndex),`duplicates ${own_entry.name} = ${other_entry.name}`)\n                                                                 //console.log(emptyspace(outerIndex),index, 'subset',subset,'<<')\n                                                                 if (index<3)//subset!==undefined) // if subset is undefined, can it even reach this deep? i.e. - if the condition neccessary\n                                                                 copyEntries(index, own_entry[subset], other_entry[subset] )\n\n                                                                 else if (subset===undefined) {\n                                                                      \n                                                                      //console.log(emptyspace(outerIndex),'??',own_entry)\n                                                                      //let smt = removeProducts(own_entry,index)\n                                                                      //console.log(emptyspace(outerIndex),'done ------- with', set)\n                                                                 }\n                                                            } //it gets added above\n                                                       })\n                                                  }\n                                             })\n                                             resolve(ownEntries)\n                                        })\n                                   }\n                              })\n                         }\n                    })\n                    .then(final=>{\n                         console.log('somethingChanged? ',somethingChanged)\n                         //if (somethingChanged) \n                         console.log('location data to save', final) //  , final===own\n\n                         // save each country without prods to device user IDB\n                         if (somethingChanged) {\n                              updateDeviceUserCountries(this.userName, final)   // store everything to deviceUser IDB\n                              .then(initializeLocationSelects(this, final))      // update screen w new data available\n\n                         } else return initializeLocationSelects(this, final)\n                    })\n          },\n          startApp:function(){\n               //this.screen = 'main'\n\n               this.userName = getDeviceUser()\n               //if (this.userName===null) this.userName = 'null'  // because of IDB so user can be found, it doesnt store null as value\n               //console.log('userName', this.userName)\n               \n               if (this.userName) this.followedUsers = getLSfollowedUsers()\n               else this.followedUsers = null\n               console.log('followedUsers', this.followedUsers)\n               \n               let ownCountries\n               let somethingChanged = false\n\n               getOwnDBData(this.userName)\n\n               // try to get other's MDB data to update IDB\n               .then( ownData =>{  \n\n                    if (!this.userName || !this.followedUsers) return initializeLocationSelects(this, ownData)\n\n                    ownCountries = ownData\n\n                    \n                    if (navigator.onLine){\n                         const fetchedData = this.followedUsers.map(fetchCountriesOfUser) // get new data for each user\n                         //console.log('nav online - fetched', fetchedData)\n\n                         Promise.all(fetchedData)\n                         .then(userData=>{   // store new user data\n                              console.log('nav online - fetched', fetchedData)\n                              const saved = userData.map(user=>setOtherUserIDBData(user))\n                              \n                              return Promise.all(saved)\n                         })\n                         \n                         .then(saved=>{      // reload view where new locations get copied to users countries\n\n                              console.log('saved? other users data', saved)\n                              //return \n                              this.reloadView()//getOtherUsersIDBData(this.followedUsers)\n\n                         })\n                         .catch(er=>console.error('error in online branch',er))\n                         \n\n                         \n                    } else {\n\n                         console.log('|||  not online')\n                    \n                         return getOtherUsersIDBData(this.followedUsers)  \n                    }\n               }).then(users=>{\n                         \n                    if (users){\n                         console.log('my own', ownCountries)\n                         \n                         /*if (!users){   // this cant happen now\n                              console.log('NO FOLLOWED USERS')\n                              return initializeLocationSelects(this, ownCountries)\n                         }*/\n\n                         let \n                             own = [...ownCountries],\n                             Users = users.map(user=>user.countries)\n\n\n                         // copies all others' locations to save them in IDB of device\n                         copyUserData(Users, own)\n                         .then(final=>{\n                                   console.log('somethingChanged? ',somethingChanged)\n                                   if (somethingChanged) console.log('location data to save', final===own, final)\n\n                                   // save each country without prods to device user IDB\n                                   if (somethingChanged) {\n                                        updateDeviceUserCountries(this.userName, final)   // store everything to deviceUser IDB\n                                        .then(initializeLocationSelects(this, final))      // update screen w new data available\n\n                                   } else return initializeLocationSelects(this, final)\n                                   //final.forEach( country => deviceUserData.countries.put(country) )\n                         })\n\n\n                         function copyUserData(users, owndata){\n                              //console.log('EQUAL', ownCountries == owndata)\n                              \n                              return new Promise((resolve, reject)=>{\n                                   const sets = ['countries','cities','shops','products']\n                                   let index = 0\n                                   users.forEach(other_countries => {\n\n                                             // remove products from each country\n                                             const others_cleaned = other_countries.map( country => removeProducts(country,0))     \n\n                                             copyEntries(index, owndata, others_cleaned)\n\n                                             .then(newCountries=> resolve(newCountries) )  \n                                   })\n\n                                   function removeProducts(entry,index){\n                                        //if (index>3) return;\n\n                                        if (entry.hasOwnProperty('products')){\n                                             //console.log('in SHOP', entry.name)\n                                             return {name: entry.name, products: []} //entry.products = []\n\n                                        } else if (entry.name){\n                                             //console.log('|||| not shop', index, entry.name, sets[index])\n                                             let name = entry.name\n                                             let prop = sets[index+1]  // cities shops\n                                             let y \n                                             entry[prop] = entry[prop].map(entry => {\n                                                            //console.log('-- going into',entry.name, sets[index+1])\n                                                            return removeProducts(entry, index+1)\n                                                           })\n                                             //console.log('filtered ',prop,'of',entry.name, entry[prop])\n                                             return entry\n                                        } \n                                   }\n                                   function copyEntries(outerIndex, ownEntries, otherEntries){\n                                        \n                                        function emptyspace(ind){\n                                                  let spaces = \"\", len = ind*5\n                                                  for (let i=0; i<len; i++){\n                                                       spaces = spaces.concat(\" \")\n                                                  }\n                                                  return spaces\n                                        }\n                                        let index = outerIndex +1\n                                        let set = sets[outerIndex], subset = sets[index]\n                                        //console.log(emptyspace(outerIndex),'index', index, set, subset)\n                                        // if its shops now\n\n                                        return new Promise((resolve,rej)=>{\n                                             otherEntries.forEach(other_entry=>{\n                                                  \n                                                  //console.log( emptyspace(outerIndex),`checking others '${other_entry.name}'`)\n\n                                                  if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)=== false ) {\n                                                       // not on device -> add it there\n                                                       //console.log(emptyspace(outerIndex),set, 'NOT THERE -> ADDING ',other_entry.name )\n                                                        //console.log(emptyspace(outerIndex),'- doing -', other_entry.name) \n                                                        //let locations = removeProducts( other_entry, index)\n                                                        //console.log('without products',set, locations, subset)\n                                                        //other_entry[subset] = location\n                                                       ownEntries.push(other_entry)\n                                                       somethingChanged = true\n                                                        //console.log(other_entry.name,'updated?',other_entry)\n                                                        //console.log( other_entry.name, 'updated?',locations )\n\n                                                  // if this entry is already there\n                                                  } else{\n                                                       ownEntries.forEach( own_entry=>{\n                                                            //console.log(emptyspace(outerIndex),'checking >>>',subset, 'of',own_entry.name, own_entry)\n                                                            //console.log(emptyspace(outerIndex),set, 'is there checking >>>',own_entry.name, own_entry)\n                                                            // take others subentries and add them to Own\n                                                            if (own_entry.name === other_entry.name){\n                                                                 //console.log(emptyspace(outerIndex),`duplicates ${own_entry.name} = ${other_entry.name}`)\n                                                                 //console.log(emptyspace(outerIndex),index, 'subset',subset,'<<')\n                                                                 if (index<3)//subset!==undefined) // if subset is undefined, can it even reach this deep? i.e. - if the condition neccessary\n                                                                 copyEntries(index, own_entry[subset], other_entry[subset] )\n\n                                                                 else if (subset===undefined) {\n                                                                      \n                                                                      //console.log(emptyspace(outerIndex),'??',own_entry)\n                                                                      //let smt = removeProducts(own_entry,index)\n                                                                      //console.log(emptyspace(outerIndex),'done ------- with', set)\n                                                                 }\n                                                            } //it gets added above\n                                                       })\n                                                  }\n                                             })\n                                             resolve(ownEntries)\n                                        })\n                                   }\n                              })\n                         }\n                    }\n               })\n               //})\n               .catch( er => {\n                    \n                    if (er===null){  //console.log('- - - will initialize Country data')\n                         \n                         storeInitialDBData(this.userName)\n                         .then( data =>{\n                              console.log('- - - stored?', data)\n                              initializeLocationSelects(this, initalCountryData)\n                              //this.startApp()\n                         })\n\n                    } else \n                         console.error('!!!!!  there was real error\\n error getting init data',er)\n               })\n          \n     \n          }\n     },\n     mounted: function(){\n          window.initializeLocationSelects = initializeLocationSelects.bind(this)  // its used on few occasions w different contexts\n          \n          checkDrBxToken()\n\n          //window.addNewLocationToDB = addNewLocationToDB.bind(this)\n          //console.log( window.addNewLocationToDB == addNewLocationToDB, addNewLocationToDB)\n\n          this.startApp()\n     },\n     created:function(){\n          //console.log('CREATED')\n     }\n})\n\nfunction getImagesData(names){\n\n     //console.log('getting img data', names)\n\n     const promises = names.map(name=>\n          new Promise((resolve, reject)=>\n               \n               picturesDB.item.get({fileName:name})\n\n               .then(result=>{ resolve(result.data) })\n               .catch(er=>{ resolve(null) })\n\n          )\n     )\n     return Promise.all(promises)\n}\n\n\nfunction addNewLocationToDB(set, toAdd){\n     console.log('add', set)\n     //return console.log('this', this)\n     //   under what country to add it\n     //   should i update whole country document?\n     \n     let somethingChanged = '333' //false\n     const copyData = new Function('users', 'owndata', copyUserData_text)\n     const self = this\n     \n     let toSave\n\n     if (set =='country'){\n                    console.log(`this happens 1`)\n                    let index = this.countries.findIndex(country=>country.name == toAdd)\n\n                    if (index>-1) { return alert(`'${toAdd}' is already in your database`) }\n\n                    const newCountry = \n                              [{   name: toAdd, \n                                   cities: [{\n                                        name: 'all cities', \n                                        shops:[{\n                                             name: 'all shops',\n                                             products: []\n                                        }]\n                                   }]\n                              }]\n                    \n                    toSave = [newCountry]\n                    \n\n     } else if (set =='city') { console.log(`this happens 1`)\n\n               let countryData = this.countries.find(cntry=> cntry.name == this.currentCountry)\n               \n               // check if this city is already there\n               let index = countryData.cities.findIndex(city=>city.name == toAdd)\n\n               if (index>-1){ return alert(`'${toAdd}' is already in your database`) }\n               \n\n               countryData.cities.push({\n                                   name: toAdd, \n                                   shops:[{\n                                        name: 'all shops',\n                                        products: []\n                                   }]\n               })\n               console.log( '   adding city',\"\\n\",countryData)\n               console.log( '   original',\"\\n\",this.countries)\n\n               toSave = [[countryData]]\n\n     } else if (set =='shop') {  console.log(`this happens 1`)\n\n          let countryData = this.countries.find(cntry=> cntry.name ===this.currentCountry)\n          \n          let cityData = countryData.cities.find(city=> city.name === this.currentCity)\n          console.log( '   adding shop ', toAdd, 'to', cityData.name)\n\n          // check its not there already\n          if (cityData.shops.findIndex(shop=>shop.name===toAdd) > -1)\n                    return alert(`'${toAdd}' is already in your database`)\n          \n\n          cityData.shops.push(\n                                   {\n                                     name: toAdd,\n                                     products: []\n                                   }\n                              )\n\n          console.log('   new entry now', this.currentCountry, countryData)\n          \n          toSave = [[countryData]]\n          \n     } else if (set=='product'){\n          let countryData = this.countries.find(cntry=> cntry.name=== this.currentCountry)\n          let cityData = countryData.cities.find(city=> city.name === this.currentCity)\n          let shopData = cityData.shops.find(shop=> shop.name=== this.currentShop)\n\n          shopData.products.push(toAdd)\n          console.log('shopData', shopData)\n          console.log('countryData', countryData)\n          toSave = [[countryData]]\n     }\n     \n\n     copyData( toSave, [...this.countries] )\n\n     .then(final=>{\n               console.log('location data to save', final===this.countries, final)\n\n               return updateDeviceUserCountries(this.userName, final)\n                         \n     }).then(result=>{\n               console.log('result', result)\n               return initializeLocationSelects(this, result)\n     })\n     .catch(er=>{alert('add Loc to DB er' + er)})\n\n\n     return this.switchScreen('main')\n}\n\n\nfunction fetchCountriesOfUser(user){\n\n     return new Promise((resolve, reject)=>{\n          console.log(`geeting data of ${user.email}`)\n\n          const xhr = new XMLHttpRequest()\n          xhr.onreadystatechange = function(){\n               if (this.readyState == 4 && this.status == 200) {     // console.log(this.status,'received',typeof this.responseText)\n\n                         const result = JSON.parse(this.responseText)\n                         result.userName = user.userName\n\n                         console.log('   got user data from server',result.email, result)\n                         resolve(result)\n\n               } else if (this.readyState == 4 && this.status!=200) reject()\n          }\n          xhr.open('POST',serverURL + 'API/getCountriesOfUser',true)\n          xhr.send(user.email)\n     })\n}\n\nfunction setOtherUserIDBData(allData){\n     console.log('allData to IDB >', allData)\n     return new Promise((resolve, reject)=>{\n\n          users_followed.userData.put(allData)\n          .then(result=>{\n               //console.log(result)  // this returns primary key i.e. email\n               resolve()\n          }).catch(er=>{\n               console.error(er)\n               reject()\n          })\n     })\n}\n\n\nfunction setLastSelection(set, value){\n     //console.log('>> saving', set, value)\n     window.localStorage.setItem(set, value.toString() )\n}\nfunction getLastSelection(set){\n     \n     let val = window.localStorage.getItem(set)\n     //console.log('requested', set, val)\n     return val\n}\n\n\n\nfunction getLSfollowedUsers(){\n     let users = window.localStorage.getItem('followedUsers')\n     users = JSON.parse(users)\n     return users\n}\nfunction addUserToDeviceLS(newUser){\n\n     let users = window.localStorage.getItem('followedUsers')\n     users = JSON.parse(users)\n\n     if (users===null) users = [newUser]\n     else if (users.some(user=>user.email==newUser.email)===false) users.push(newUser) // add new user only if he isnt there yet\n\n     console.log('LS users now', users)\n\n     return window.localStorage.setItem('followedUsers', JSON.stringify(users))\n}\n\n\nfunction updateDeviceUser(name = 0){\n     //if ( window.localStorage.getItem('deviceUser') === null){\n          name = name.toString().trim()\n\n          const initialData = {\n               userName: name, \n               createdDate: getFormattedDate(null)\n          } \n          window.localStorage.setItem('deviceUser', JSON.stringify(initialData)) \n     //}\n     console.log('created user', window.localStorage.getItem('deviceUser') )\n}\n\nfunction getDeviceUser(){\n\n          let data = JSON.parse(window.localStorage.getItem('deviceUser'))\n          if (data) return data.userName\n          else return undefined\n}\n\nfunction getOwnDBData(user = 0){\n     console.log(`getting data of ${user}`)\n\n     return new Promise((resolve, reject)=>{\n\n          //console.log('test1',deviceUserData.userData.userName)\n\n          /*if (deviceUserData.userData===undefined) {\n               console.log('!! 1st condition')\n               return reject(null)\n          }*/\n\n          deviceUserData.userData.get({userName:user})//.toArray()   // https://dexie.org/docs/Table/Table.get()\n          .then(data => {\n               if (data==undefined) {\n                    console.log('no data, probably initializing app?')\n                    return reject(null)\n               } \n\n               const res = data.countries\n               \n               if (Array.isArray(res)) resolve(res)\n\n               else if (res.hasOwnProperty('name')){\n                    console.log('got only initial data')\n                    resolve([res])\n               }\n          })\n          .catch(er => {\n               console.log('||||||||||  er',er)\n               reject(er) \n          })\n     })\n}\n\nfunction storeInitialDBData(userName = 0){\n     console.log(`storing data for ${userName}`)\n     return new Promise((resolve, reject)=>{\n          //console.log(window.deviceUserData.userData)\n          \n          deviceUserData.userData.put({userName, countries: initalCountryData})\n\n          .then(all=>{\n                    console.log('stored initial data:', all,\"<<\")\n                    resolve(all)\n          })                         \n          .catch(er=>{\n               console.error(er);\n               reject(er)\n          })\n     })\n}\n\nfunction getOtherUsersIDBData(localUsers){\n     //console.log('    localUsers', localUsers)\n\n     return new Promise((resolve,rej)=>{\n          if (!localUsers || localUsers.length==0) return resolve(null)\n\n          users_followed.userData.toArray()\n          .then(users =>{ \n               \n               users = users.filter(user=> localUsers.find(lUser=>lUser.email==user.email)!==undefined )\n               //console.log('|||     filtered users',users)\n\n               if (users.length==0) resolve(null)     // when can this happen?\n               else resolve(users)\n\n          })\n          .catch(er=>console.error('error opening following', er))\n     })\n}\n\n\nfunction initializeLocationSelects(self, countries){\n     console.log('initializing countries\\n')\n\n     self.countries = countries\n     self.currentCountry = getLastSelection('countries') || 'all countries'\n     //console.log(self.currentCountry, self.countries)\n     //self.updateLocationSelect('countries','cities',undefined, self.currentCountry.toString() )\n\n     // city\n     let lastCntry = countries.find(cn=>cn.name=== self.currentCountry)\n     self.cities = lastCntry.cities\n     //console.log('self.cities',self.cities)\n\n     \n     self.currentCity = getLastSelection('cities') || 'all cities' \n     //console.log('currentCity', self.currentCity)\n     let lastCity = self.cities.find(city => city.name ==  self.currentCity)\n\n     // shop\n     //let lastCity = self.cities.find(city => city.name === self.currentCity )\n     self.shops = lastCity.shops\n     self.currentShop =  getLastSelection('shops')  || 'all shops'\n     //console.log(self.currentShop)\n\n     let gz = self.updateLocationSelect(2, null,self.currentShop)\n\n     console.log('promise?', gz)\n     /*gz.then(x=>{  //it doesnt return promise\n          console.log('after updated loaction', x)\n     })*/\n     //console.log('this happens last')\n     // this is probably not needed anymore\n     self.currentDisplayedProducts = self.shops.find(shop=>shop.name === self.currentShop).products\n     //console.log('curr prods',self.currentDisplayedProducts)\n}\n\n\n\nfunction copyUserData(users, owndata){\n     console.log('EQUAL', users, owndata)\n     //console.log('copying', somethingChanged)//users, owndata)\n     \n     return new Promise((resolve, reject)=>{\n          const sets = ['countries','cities','shops','products']\n          let index = 0\n          users.forEach(other_countries => {\n\n                    // remove products from each country\n                    const others_cleaned = other_countries.map( country => removeProducts(country,0))     \n\n                    copyEntries(index, owndata, others_cleaned)\n\n                    .then(newCountries=> resolve(newCountries) )  \n          })\n\n          function removeProducts(entry,index){\n               //if (index>3) return;\n\n               if (entry.hasOwnProperty('products')){\n                    //console.log('in SHOP', entry.name)\n                    return {name: entry.name, products: []} //entry.products = []\n\n               } else if (entry.name){\n                    //console.log('|||| not shop', index, entry.name, sets[index])\n                    let name = entry.name\n                    let prop = sets[index+1]  // cities shops\n                    let y \n                    entry[prop] = entry[prop].map(entry => {\n                                   //console.log('-- going into',entry.name, sets[index+1])\n                                   return removeProducts(entry, index+1)\n                                  })\n                    //console.log('filtered ',prop,'of',entry.name, entry[prop])\n                    return entry\n               } \n          }\n          function copyEntries(outerIndex, ownEntries, otherEntries){\n               \n               function emptyspace(ind){\n                         let spaces = \"\", len = ind*5\n                         for (let i=0; i<len; i++){\n                              spaces = spaces.concat(\" \")\n                         }\n                         return spaces\n               }\n               let index = outerIndex +1\n               let set = sets[outerIndex], subset = sets[index]\n               //console.log(emptyspace(outerIndex),'index', index, set, subset)\n               // if its shops now\n\n               return new Promise((resolve,rej)=>{\n                    otherEntries.forEach(other_entry=>{\n                         \n                         //console.log( emptyspace(outerIndex),`checking others '${other_entry.name}'`)\n\n                         if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)=== false ) {\n                              // not on device -> add it there\n                              //console.log(emptyspace(outerIndex),set, 'NOT THERE -> ADDING ',other_entry.name )\n                               //console.log(emptyspace(outerIndex),'- doing -', other_entry.name) \n                               //let locations = removeProducts( other_entry, index)\n                               //console.log('without products',set, locations, subset)\n                               //other_entry[subset] = location\n                              ownEntries.push(other_entry)\n                              somethingChanged = true\n                               //console.log(other_entry.name,'updated?',other_entry)\n                               //console.log( other_entry.name, 'updated?',locations )\n\n                         // if this entry is already there\n                         } else{\n                              ownEntries.forEach( own_entry=>{\n                                   //console.log(emptyspace(outerIndex),'checking >>>',subset, 'of',own_entry.name, own_entry)\n                                   //console.log(emptyspace(outerIndex),set, 'is there checking >>>',own_entry.name, own_entry)\n                                   // take others subentries and add them to Own\n                                   if (own_entry.name === other_entry.name){\n                                        //console.log(emptyspace(outerIndex),`duplicates ${own_entry.name} = ${other_entry.name}`)\n                                        //console.log(emptyspace(outerIndex),index, 'subset',subset,'<<')\n                                        if (index<3)//subset!==undefined) // if subset is undefined, can it even reach this deep? i.e. - if the condition neccessary\n                                        copyEntries(index, own_entry[subset], other_entry[subset] )\n\n                                        else if (subset===undefined) {\n                                             \n                                             //console.log(emptyspace(outerIndex),'??',own_entry)\n                                             //let smt = removeProducts(own_entry,index)\n                                             //console.log(emptyspace(outerIndex),'done ------- with', set)\n                                        }\n                                   } //it gets added above\n                              })\n                         }\n                    })\n                    resolve(ownEntries)\n               })\n          }\n     })\n}\n\n\nfunction updateDeviceUserCountries(userName=0, countries){\n     //console.log(`save to user: ${userName} ${countries}`)\n     let obj = {userName, countries }\n     //console.log(obj)\n     return new Promise((resolve, reject)=>{\n\n          deviceUserData.userData.put({ userName, countries })\n          .then(result=>{\n               console.log(result)\n               resolve(countries)\n\n          }).catch(er=>{})\n     })\n}\nconst copyUserData_text = `\n     console.log('newdata, owndata', users, owndata)\n     //console.log('copying', somethingChanged)//users, owndata)\n\n     return new Promise((resolve, reject)=>{\n          const sets = ['countries','cities','shops','products']\n          let index = 0\n          users.forEach(other_countries => {\n                    console.log(other_countries)\n                    // remove products from each country  \n                    // not if its used to store new location\n                    //const others_cleaned = other_countries//.map( country => removeProducts(country,0))     \n\n                    copyEntries(index, owndata, other_countries)//others_cleaned)\n\n                    .then(newCountries=> resolve(newCountries) )  \n          })\n\n          function removeProducts(entry,index){\n               //if (index>3) return;\n\n               if (entry.hasOwnProperty('products')){\n                    //console.log('in SHOP', entry.name)\n                    return {name: entry.name, products: []} //entry.products = []\n\n               } else if (entry.name){\n                    //console.log('|||| not shop', index, entry.name, sets[index])\n                    let name = entry.name\n                    let prop = sets[index+1]  // cities shops\n                    let y \n                    entry[prop] = entry[prop].map(entry => {\n                                   //console.log('-- going into',entry.name, sets[index+1])\n                                   return removeProducts(entry, index+1)\n                              })\n                    //console.log('filtered ',prop,'of',entry.name, entry[prop])\n                    return entry\n               } \n          }\n          function copyEntries(outerIndex, ownEntries, otherEntries){\n               \n               function emptyspace(ind){\n                         let spaces = \"\", len = ind*5\n                         for (let i=0; i<len; i++){\n                              spaces = spaces.concat(\" \")\n                         }\n                         return spaces\n               }\n               let index = outerIndex +1\n               let set = sets[outerIndex], subset = sets[index]\n               //console.log(emptyspace(outerIndex),'index', index, set, subset)\n               // if its shops now\n\n               return new Promise((resolve,rej)=>{\n                    otherEntries.forEach(other_entry=>{\n                         \n                         if (ownEntries.some(ownEntry=> ownEntry.name == other_entry.name)=== false ) {\n                              // not on device -> add it there\n                              console.log(emptyspace(outerIndex),set, 'NOT THERE -> ADDING ',other_entry.name )\n                              //console.log(emptyspace(outerIndex),'- doing -', other_entry.name) \n                              //let locations = removeProducts( other_entry, index)\n                              //console.log('without products',set, locations, subset)\n                              //other_entry[subset] = location\n                              ownEntries.push(other_entry)\n                              //console.log(somethingChanged)\n                              //if (somethingChanged!=undefined) somethingChanged = true\n                              //console.log(other_entry.name,'updated?',other_entry)\n                              //console.log( other_entry.name, 'updated?',locations )\n\n                         // if this entry is already there\n                         } else{\n                              ownEntries.forEach( own_entry=>{\n                                   //console.log(emptyspace(outerIndex),'checking >>>',subset, 'of',own_entry.name, own_entry)\n                                   //console.log(emptyspace(outerIndex),set, 'is there checking >>>',own_entry.name, own_entry)\n                                   // take others subentries and add them to Own\n                                   if (own_entry.name === other_entry.name){\n                                        //console.log(emptyspace(outerIndex),index, 'subset',subset,'<<')\n                                        if (index<3)//subset!==undefined) // if subset is undefined, can it even reach this deep? i.e. - if the condition neccessary\n                                        copyEntries(index, own_entry[subset], other_entry[subset] )\n\n                                        else if (subset===undefined) {\n                                             \n                                             //console.log(emptyspace(outerIndex),'??',own_entry)\n                                             //let smt = removeProducts(own_entry,index)\n                                             //console.log(emptyspace(outerIndex),'done ------- with', set)\n                                        }\n                                   } //it gets added above\n                              })\n                         }\n                    })\n                    resolve(ownEntries)\n               })\n          }\n     })`\n//\n\nfunction getFormattedDate(date){\n     //console.log('typeof Date',typeof date, date)\n \n     if (typeof date == 'number') date = new Date(date)\n     else if (!date) date = new Date()\n \n     let year = date.getFullYear(),\n         month = date.getMonth()+1,\n         day = date.getDate(),\n         hours = date.getHours(),\n         minutes = date.getMinutes(),\n         secs = date.getSeconds()\n\n     const obj = {\n          year, month, day, hours, minutes, secs\n     }\n\n     for (let num in obj){\n          if (obj[num]<10) obj[num] =  String('0' + obj[num] ) \n     }\n\n     return `${obj.year}-${obj.month}-${obj.day}_T${obj.hours}-${obj.minutes}-${obj.secs}`\n}\nfunction saveImageToIDB(fileName){\n     console.log(getDeviceUser(), fileName)\n\n     return new Promise((resolve, reject)=>{\n          if (!fileName || !window.canvasData) reject(null)\n          let user = getDeviceUser()\n                  //{data: fileName, userName,                  data\n          picturesDB.item.put({ 'fileName': fileName, 'userName': user, 'data': window.canvasData })\n          .then(result=>{\n               console.log('result',result)\n               resolve(result)\n          })\n          .catch(er=>{console.error(er)})\n     })\n}\n\nfunction nodeListToArray(list){\n     let result = []\n     for (let item of list) result.push(item)\n     \n     return result\n}\n\n\n\nconst getPicURL = function(entry){\n\n     return new Promise((resolve, reject)=>{\n\n          let obj = {\"path\": entry.path_display }\n          obj = JSON.stringify( entry) \n          const xhr = new XMLHttpRequest()\n          xhr.onreadystatechange = function(){\n\n               if (this.readyState == 4 && this.status == 200) {\n\n                         console.log('SUKCES', this.status)//this.response, this.responseText)\n                         resolve(this.responseText)\n\n               } else console.log(this.status)\n          }\n          xhr.open('POST', serverURL + '/API/getPicURL', true)\n          xhr.send(obj)\n     })\n}\n\n\n\n\n\n\n\n/*let somelet = 44\nconst funText = 'console.log(\"hi \" + somelet)'\nfunction fun(){\n\n     let somelet = 33\n     let f2 = new Function(funText) \n     let f3 = function(){\n          let somelet = 33\n          let f4 = new Function(funText) \n          return f4()\n     }\n     console.log(f3)\n     //hi = function(){ console.log('oh ' + somelet)} \n     return f3()    //hi()\n}*/\n//fun()\n\n\n\n\n\n/* templating attempt\n//import App from './templ1.Vue'\n//const tem1 = require('./templ1.Vue')\n//console.log(tem1)\n\nlet templ1 = new Vue({\n     el: '#templ1',\n     data: {\n          msg: 'hoho'\n     }\n     //render: h => h(App)\n})\n\nlet productTemplate = Vue.component('product',{\n     data:{\n          pname: 'jezisek'\n     },\n     props:{\n          pname: 'jezisek'\n     },\n     created:function(){\n          this.pname = 'babuska'\n     },\n     mounted:function(){\n          this.pname = 'babuska'\n     },\n     render:function(createElement){\n          return createElement(\n               'p',\n               `omg product ${this.pname} `\n               //this.$slots.default\n          )\n     }\n})*/"},"hash":"b6f95b4f0ab72213091075456be3dd4a"}