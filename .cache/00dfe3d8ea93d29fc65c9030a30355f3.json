{"dependencies":[],"generated":{"js":"window.user_locations = new Dexie('user_locations');\n\n     window.user_locations.version(1).stores({  countries: 'name, cities'  });\n     user_locations.open().then(data=>{})\n          .catch(function(error) {\n                    console.error('Uh oh : ' + error);\n     });\n\n\n     \nconst users_followed = new Dexie('users_followed')\n\n     users_followed.version(1).stores({ userData: data})\n\n     users_followed.open()\n     .catch(er=>alert('error opening following', er))\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', ev =>{     \n\n     user_locations.countries.toArray().then(arr=>{\n               //console.log('arr',arr )\n               \n\n               /*if (arr.length==0){\n                    console.log('storing initial data')\n\n                    user_locations.countries.put({\n                                   name: 'all countries' , \n                                   cities: [{\n                                             name: 'all cities', \n                                             shops:[{\n                                                  name: 'all shops',\n                                                  products: []\n                                             }]\n                                            }]\n                    })\n                    return user_locations.countries.get('all countries')\n\n                    .then(all=>{\n                         console.log('stored initial data:', all)\n                         //updateWindowDBData()   \n                    }) \n\n               } //else updateWindowDBData()\n               */\n     })\n\n})\n\nwindow.updateWindowDBData = function(obj){\n      \n          /*window.user_locations.countries.toArray()\n               .then(all=>{\n                    //window.countries = all\n                    this.countries = all\n               })*/\n}\n\n\n\nconst app = new Vue({\n     el: '#app',\n     data: {\n          locationInputShown: false,\n          locationSet: null,\n          newLocation: null,\n\n          \n          currentCountry: 'all countries',\n          currentCity: 'all cities',\n          currentShop: 'all shops',\n          countries: [],\n          cities: [],\n          shops: []\n     },\n     \n     methods:{\n          storeInitialDBData:function(){\n               return new Promise((resolve, reject)=>{\n\n                         user_locations.countries.put({\n                                             name: 'all countries' , \n                                             cities: [\n                                                       {\n                                                        name: 'all cities', \n                                                        shops:[{\n                                                                 name: 'all shops',\n                                                                 products: []\n                                                        }]\n                                                       }\n                                                     ]\n                              \n                         })\n                         .then(all=>{\n                                   console.log('stored initial data:', all,\"<<\")\n                                   //updateWindowDBData()  \n                              user_locations.countries.toArray()\n                              .then(data=>resolve(data))\n                                   \n\n                         }).catch(er=>{console.error(er);\n                              reject(er)\n                         }) \n               })\n          },\n          getUpdatedDBData: function(){\n               return new Promise((reso, reje)=>{\n                    window.user_locations.countries.toArray()\n                    .then(all =>{  \n                                   //this.countries = all\n                                   reso(all)\n                    })\n               })\n          },\n          openLocationInput: function(set,ev){\n               this.locationInputShown = true\n               console.log('event', set, ev)\n               this.locationSet = `${set}`\n\n               //prevent adding citites to 'all countries'\n               if (this.locationSet=='city' && this.currentCountry == 'all countries') {\n                    alert('choose country first')\n                    return this.locationInputShown = false\n               }\n          },\n          addNewLocation: function(){\n               console.log(`new ${this.locationSet} is ${this.newLocation}`)\n\n               this.addLocationToDB(this.locationSet, this.newLocation)\n          },\n          addLocationToDB: function(set, newName){\n\n               /*   under what country to add it\n                    should i update whole country document?\n               */     \n               \n               if (set =='country'){\n                              console.log('vue locs', user_locations)\n\n                              let index = this.countries.findIndex(country=>country.name == newName)\n\n                              if (index>-1) {\n                                   alert(`${newName}\\nis already in your database`)\n                                   return\n                              }\n                              const obj = {  name: newName, \n                                             cities: [{\n                                                  name: 'all cities', \n                                                  shops:[{\n                                                       name: 'all shops',\n                                                       products: []\n                                                  }]\n                                             }]\n                              }\n                              window.user_locations.countries.add(obj).then(status => \n                                   this.getUpdatedDBData().then(data => this.countries = data) // then select newly added thing\n                              )\n\n                         //})\n               } else if (set =='city') {\n                         let countryData = this.countries.find(cntry=> cntry.name==this.currentCountry)\n                         console.log( '   adding city',this.countries,\"\\n\",countryData)\n\n\n                         // check if this city is already there\n                         let index = countryData.cities.findIndex(city=>city == newName)\n\n                         if (index>-1){\n                              alert(`${newName}\\nis already in your database`)\n                              return\n                         }\n                         countryData.cities.push({\n                                             name: newName, \n                                             shops:[{\n                                                  name: 'all shops',\n                                                  products: []\n                                             }]\n                         })\n                         window.user_locations.countries.put(countryData).then(status =>{ \n\n                              this.getUpdatedDBData().then(data => this.countries = data)\n                              console.log('updated Vue data',this.countries) \n                         })\n               } else if (set =='shop') {\n                    let countryData = this.countries.find(cntry=> cntry.name===this.currentCountry)\n                    \n                    let cityData = countryData.cities.find(city=>city.name === this.currentCity)\n                    console.log( '   adding shop',cityData)\n                    // check its not there already\n                    if (cityData.shops.findIndex(shop=>shop.name===newName)>-1){\n                         alert(`${newName}\\nis already in your database`)\n                         return\n                    }\n\n                    cityData.shops.push(\n                                             {\n                                               name: newName,\n                                               products: []\n                                             }\n                                        )\n                    console.log('   new cntry data',this.currentCountry, countryData)\n                    window.user_locations.countries.put(countryData).then(status => {\n                                             console.log('   updated Vue data',this.countries) \n                                             this.getUpdatedDBData().then(data => this.countries = data) // then select newly added thing\n                    })\n\n               }\n               this.locationInputShown= false\n               this.newLocation = \"\"\n\n          },\n          updateLocationSelect:function(set, subset, event){\n\n               //, event.srcElement)//.selectedOptions[0].text)\n               \n\n               const variable = event.srcElement.getAttribute('data-forlabel')\n               console.log('---------------------\\nset',set,\"subset\",subset, \"\\n variable\",variable)\n\n\n               getSubsetItems(this[set], subset, event.srcElement.selectedOptions[0].text)\n               .then(result =>{\n\n                    console.log(\"subset  >\",subset,\"\\n  >\",result.name, \n                                \"\\n  >\",result[subset])\n\n                    //this[variable] = result.name\n                    this[subset] = result[subset]\n                    //console.log('   set',set,'\\n   subset',subset, '\\n',this[subset])\n\n                    //['cn','ct','sh']\n               })\n          }\n     },\n     mounted: function(){\n          this.getUpdatedDBData().then( countries =>{\n                    console.log('resolved',countries)\n\n                    if (countries.length===0){\n                         this.storeInitialDBData()\n                         .then( initialData => {\n\n                              console.log('-->>  initialData', initialData)\n                              initializeCountriesState(this, initialData)}\n                         )\n                    return\n                    }\n                    initializeCountriesState(this, countries)\n                    \n\n\n          }).catch(er => console.error('error getting init data',er))\n          \n          function initializeCountriesState(self, countries){\n                    //console.log('this',this,\"\\n\", countries)\n                    self.countries = countries\n                    self.cities = countries[0].cities\n                    self.shops = countries[0].cities[0].shops\n\n                    //this.currentCountry = countries[0].name\n                    //this.currentCity = countries[0].cities[0].name\n                    //this.currentShop = countries[0].cities[0].shops[0].name\n                    console.log( 'current Locs\\n',self.countries,\"\\n\",self.cities,\"\\n\",self.shops)\n          }\n     },\n     \n})\n\n\n\nfunction getSubsetItems(set, subset, name){\n     console.log('getSubsetItems',set, subset, name)\n     \n     return new Promise((resolve, rej)=>{\n          let result = set.find(obj=>obj.name === name)\n          //console.log('   !!!  res.name, result',result.name, result[subset])\n\n          resolve( {name:result.name, [subset]: result[subset] })\n          \n     })\n     \n}\nfunction updateSubsetSelect(){\n\n}\n\nfunction getPicDate(date){\n     console.log('typeof Date',typeof Date)\n \n     if (typeof date === 'number'){\n         date = new Date()\n         //var d = new Date();\n         //d.setTime(1332403882588);\n         console.log(date)\n     }\n \n     let year = date.getFullYear(),\n         month = date.getMonth()+1,\n         day = date.getDate(),\n         hours = date.getHours(),\n         minutes = date.getMinutes(),\n         secs = date.getSeconds()\n\n     return `${year}-${month}-${day} ${hours}-${minutes}-${secs}`\n     \n}"},"hash":"7bb25f96fb2fe540972da40c985cce04"}